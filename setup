#!/usr/bin/env python3

import os
from dataclasses import dataclass

@dataclass
class Repos:
    name: str
    repo: str
    bare_checkout: bool
    personal: bool

@dataclass
class SoftwareRepo:
    name: str
    repo: str

@dataclass
class Package:
    package: str
    aur: bool

def git_command(repo: str, bare_checkout: bool, name: str, personal_or_work: str) -> str:
    if bare_checkout:
        return f"git clone --bare {repo} /home/sky/{personal_or_work}/{name}"
    return f"git clone {repo} /home/sky/{personal_or_work}/{name}"

def install_repo(repo: str, personal: bool, bare_checkout: bool, name: str):
    if personal:
        os.system(git_command(repo, bare_checkout, name, "personal"))
    else:
        os.system(git_command(repo, bare_checkout, name, "work"))

def install_software_repo(repo: str, name: str):
    os.system(f"git clone {repo} /home/sky/.local/src/{name}")

def setup_folders():
    dirs = [
        "/home/sky/.local/src/",
        "/home/sky/personal/",
        "/home/sky/work/",
        "/home/sky/Pictures/",
        "/home/sky/Pictures/Captures/",
        "/home/sky/Videos/",
        "/home/sky/Downloads/",
        "/home/sky/Documents/",
    ]

    for dir in dirs:
        os.makedirs(dir)

def install_package(package: str, aur: bool):
    if aur:
        os.system(f"sudo yay --noconfirm --needed -S {package}")
    else:
        os.system(f"sudo pacman --noconfirm --needed -S {package}")

def compile_program(path: str):
    os.system(f"cd {path} && sudo make && sudo make install")

def main():
    print("This will make changes to your system.")
    print("The script asumes your home dir is under the user sky.\nIf it's not make sure to change the username in the script.")
    should_continue = input("Continue the install? (y/n) ")
    if should_continue == "n":
        exit()

    setup_folders()

    os.system("sudo pacman --noconfirm -Syyu")

    # Make pacman colorful, concurrent downloads and Pacman eye-candy.
    os.system("sudo grep -q 'ILoveCandy' /etc/pacman.conf || sed -i '/#VerbosePkgLists/a ILoveCandy' /etc/pacman.conf")
    os.system("sudo sed -Ei 's/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//' /etc/pacman.conf")

    # Use all cores when compling things with make
    os.system("sudo sed -i 's/-j2/-j$(nproc)/;/^#MAKEFLAGS/s/^#//' /etc/makepkg.conf")

    repos: list[Repos] = [
        # Personal
        Repos("control-aircon", "git@gihub.com:skykosiner/dakin-aircon-golang", False, True),
        Repos("control-lights", "git@github.com:skykosiner/control-hue-light-golang", False, True),
        Repos("control-website", "git@github.com:skykosiner/control-website", True, True),
        Repos("file-browser", "git@github.cm:skykosiner/file-browser",False, True),
        Repos("skykosiner-com", "git@github.cm:skykosiner/skykosiner-com", True, True),
        Repos("statusline.nvim", "git@github.cm:skykosiner/statusline.nvim", False, True),
        Repos("todoist-cli", "git@github.cm:skykosiner/todoist-cli", False, True),
        Repos("todoist.nvim", "git@github.cm:skykosiner/todoist.nvim", False, True),

        # Work
        Repos("dish-diaries", "git@github.cm:skykosiner/dish-diaries", True, False),
    ]

    for repo in repos:
        install_repo(repo.repo, repo.personal, repo.bare_checkout, repo.name)

    software_repo: list[SoftwareRepo] = [
        SoftwareRepo("dmenu", "git@github.com:skykosiner/dmenu"),
        SoftwareRepo("dwmblocks", "git@github.com:skykosiner/dwmblocks"),
        SoftwareRepo("dwm", "git@github.com:skykosiner/dwm"),
        SoftwareRepo("neovim", "git@github.com:neovim/neovim"),
        SoftwareRepo("st", "git@github.com:skykosiner/st"),
        SoftwareRepo("yay", "git@github.com:jguer/yay"),
    ]

    for repo in software_repo:
        install_software_repo(repo.repo, repo.name)

    # Compile programs
    compile_program("/home/sky/.local/src/neovim")
    compile_program("/home/sky/.local/src/dmenu")
    compile_program("/home/sky/.local/src/dmenu")
    os.system("cd /home/sky/.local/src/yay && makepkg --noconfirm -si")

    packages: list[Package] = [
        # Packaman packages
        Package("arandr", False),
        Package("bat", False),
        Package("bc", False),
        Package("btop", False),
        Package("cmake", False),
        Package("cmatrix", False),
        Package("cowsay", False),
        Package("crontab", False),
        Package("droidcam", False),
        Package("dunst", False),
        Package("ffmpeg", False),
        Package("ffmpegthumbnailer", False),
        Package("flameshot", False),
        Package("fzf", False),
        Package("gimp", False),
        Package("git", False),
        Package("github-cli", False),
        Package("go", False),
        Package("htop", False),
        Package("kitty", False),
        Package("lf", False),
        Package("lolcat", False),
        Package("lynx", False),
        Package("man", False),
        Package("mpv", False),
        Package("npm", False),
        Package("obs-studio", False),
        Package("picom", False),
        Package("pulsemixer", False),
        Package("python-dbus", False),
        Package("python-pip", False),
        Package("qbittorent", False),
        Package("ripgrep", False),
        Package("rsync", False),
        Package("rust", False),
        Package("spotify-launcher", False),
        Package("stow", False),
        Package("sxiv", False),
        Package("tldr", False),
        Package("tmux", False),
        Package("tor", False),
        Package("ueberzug", False),
        Package("vim", False),
        Package("wezterm", False),
        Package("xclip", False),
        Package("xorg-xkill", False),
        Package("zathura", False),
        Package("zathura-pdf-mupdf", False),
        Package("zoxide", False),

        # aur packages
        Package("authy", True),
        Package("brave-bin", True),
        Package("droidcam", True),
        Package("netlify", True),
        Package("obsidian", True),
        Package("unimatrix", True),
        Package("zsh-autosuggestions-git", True),
        Package("zsh-syntax-highlighting-git", True),
    ]

    for package in packages:
        install_package(package.package, package.aur)

    # Install a few other bits
    os.system("cargo install starship")

    dotfiles_to_stow = [
        "aircon",
        "alacritty",
        "bin",
        "dunst",
        "fonts",
        "i3",
        "kitty",
        "lf",
        "mpv",
        "nvim",
        "shell",
        "starship",
        "sxhkd",
        "sxiv",
        "tmux",
        "tree-sitter",
        "vim",
        "zsh",
    ]

    for dotfile in dotfiles_to_stow:
        os.system(f"cd /home/sky/.dotfiles/ && stow {dotfile}")

if __name__ == "__main__":
    main()
